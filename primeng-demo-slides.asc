= PrimeNG - A leading open source UI component library for Angular 2
Sudheer Jonna
:backend: revealjs
:source-highlighter: highlight.js 
:revealjs_history: true
:figure-caption!:

:imagesdir: images
:server-url: 127.0.0.1:8000/
:jaxrs-example-src: ../angular-primeng-jsweet-todo-server/src/main/java/virtua/primeng_jsweet_jaxrs_todo/resource/TaskResource.java

:examples-dir: examples

== Sudheer Jonna
[%step]
* Working as Senior developer in Singapore
* PrimeFaces and PrimeFaces Extensions open source projects team member
** Author for multiple books
* Technical reviewer
* Trainer for JSF/PrimeFaces and front end technologies
* Founder, JSF Central (http://www.jsfcentral.com)


== Angular, Angular, Angular
[NOTE.speaker]
--
* Missed Angular1 phenomenon, paying attention to Angular2
--

== Angular 2 Features
[%step]
* Code splitting
* Animation
* Templates
* Data binding
* CLI
* Accessibility
* Testing
** Jasmine, Protractor, Karma
* Routing, HTTP communication, Forms, etc.

[NOTE.speaker]
--
* Who has used Angular2?
--

== Angular 2 Architecture
[%step]
* Directives
* Components
** Templates
* Services
* Modules
* Dependency Injection

== Angular 2 Architecture
image::angular2-overview2.png[]

== Angular 2 AppModule
[source, language="typescript", indent=0]
----
import { NgModule }      from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
@NgModule({
  imports:      [ BrowserModule ],
  providers:    [ Logger ],
  declarations: [ AppComponent ],
  exports:      [ AppComponent ],
  bootstrap:    [ AppComponent ]
})
class AppModule { }
----

== Angular 2 Bootstrap
[source, language="typescript", indent=0]
----
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule } from './app.module';

platformBrowserDynamic().bootstrapModule(AppModule);
----

== Angular 2 Component
[source, language="typescript", indent=0]
----
import { Component, OnInit }   from '@angular/core';

import { Hero }                from './hero';
import { HeroService }         from './hero.service';

@Component({
  selector:    'hero-list',
  templateUrl: 'app/hero-list.component.html',
  providers:   [ HeroService ]
})
export class HeroListComponent implements OnInit {
  heroes: Hero[];
  selectedHero: Hero;

  constructor(private service: HeroService) { }

  ngOnInit() {
    this.heroes = this.service.getHeroes();
  }

  selectHero(hero: Hero) { this.selectedHero = hero; }
}
----

== Angular 2 Template
[source,language="html",indent=0]
----
<h2>Hero List</h2>
<p><i>Pick a hero from the list</i></p>
<ul>
  <li *ngFor="let hero of heroes" (click)="selectHero(hero)">
    {{hero.name}}
  </li>
</ul>
<hero-detail *ngIf="selectedHero" [hero]="selectedHero"></hero-detail>
----

== Angular 2 Service
[source,language="typescript",indent=0]
-----
import { Injectable } from '@angular/core';

import { Hero } from './hero';
import { BackendService } from './backend.service';
import { Logger } from './logger.service';

@Injectable()
export class HeroService {
  private heroes: Hero[] = [];

  constructor(
    private backend: BackendService,
    private logger: Logger) { }

  getHeroes() {
    this.backend.getAll(Hero).then( (heroes: Hero[]) => {
      this.logger.log(`Fetched ${heroes.length} heroes.`);
      this.heroes.push(...heroes); // fill cache
    });
    return this.heroes;
  }
}
-----

== PrimeNG
[%step]
* Sibling of PrimeFaces, the most popular JSF component library
* Over 70 rich UI components
* Customizable themes
* Premium themes and layouts

[NOTE.speaker]
--
* Who has used PrimeFaces?
--	

== PrimeNG Demo

http://www.primefaces.org/primeng/[PrimeNG Demo^]

== JAX-RS
[%step]
* Java EE standard for building RESTful services
* Used by DropWizard and Spring Boot
* Jersey is the reference implementation
* Features
** Annotations for defining REST resources 
** Providers 
** Filters and Interceptors
** Validation
** Client API

[NOTE.speaker]
--
* Who has used JAX-RS
--

== JAX-RS Example
[source, language="java", indent=0]
----
include::{jaxrs-example-src}[tags=jaxrs-simple]
...
}
----

== TypeScript is Cool
[%step]
* but what if you could write the front-end in Java?

[NOTE.speaker]
--
* I've been writing lots of TypeScript on the front-end, with Java on the back-end
* TypeScript is great -- built for describing the myriad of patterns in the JavaScript world 
** "shapes"
--

== Enter JSweet
[%step]
* Let you write Java that is transpiled to TypeScript and JavaScript
* Projects build using ordinary Java tools
** Eclipse, IntelliJ, Maven, Gradle, etc.
* Supports http://www.jsweet.org/candies-releases/[hundreds of JavaScript APIs^]
** Angular 1
** Angular 2 (prelimiary)
** React (beta)
** jQuery
** Node

[NOTE.speaker]
--
* Implemented just enough Angular2 and PrimeNG to get demo working; required changes to the JSweet transpiler
--

== JSweet Architecture
image::jsweetmaindesign.png[]

== JSweet
[%step]
* http://jsweet.org
* Author: Renaud Pawlak (renaud.pawlak@gmail.com)
* Main contributor: Louis Grignon (louis.grignon@gmail.com)
* Main partner: EASYTRUST (http://www.easytrust.com) (Oracle partner)

[NOTE.speaker]
--
## Renaud Pawlak's background

Renaud Pawlak is a fullstack lead developer and architect, startup founder, with an academic research background.

Renaud Pawlak developed an expertise in Java transpilers working on AOP (two books written on J2EE and AOP). 
In 2004, he started the Spoon Java transpiler project (https://github.com/INRIA/spoon) at French Research Institute INRIA.
--

== JSweet History
* Mid-2014: first prototype, proof of concepts applications
* Mid-2015: full-time development
* December 2015: version 1.0 + DefinitelyTyped APIs
* March 2016: version 1.1 + Java APIs support
* JSweet version 1.2 is expected by the end of 2016

[NOTE.speaker]
--
In short, 1.2 will provide even better support for Java (for example full enum support), getClass() support, etc...
so that it will be even easier to share complex code between the client and the server. 1.2, will come with a more extensive implementation of the JDK APIs in the J4TS project. 
Also, creating your own candies and support your own APIs will be more straightforward with version 1.2. 
--

== Demo

== Questions?

Slides and sample app: https://github.com/sudheerj/primeng-demo-slides